generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String?              @unique
  image              String?
  createdAt          DateTime             @default(now())
  accounts           Account[]
  reflections        Reflection[]
  reflectionFolders  ReflectionFolder[] 
  username           String?              @unique 
  bio                String?
  goal               String?
  website            String?
  isReportOpen       Boolean           @default(false)
}

model Reflection {
  reflectionCUID    String            @id @default(cuid()) @db.VarChar(30)
  userId            String
  title             String
  content           String
  charStamp         String
  aiFeedback        String?
  isPublic          Boolean           @default(false)
  isPinned          Boolean           @default(false)
  isDailyReflection Boolean           @default(false)
  isLearning        Boolean           @default(false)
  isAwareness       Boolean           @default(false)
  isMonologue       Boolean           @default(false)
  isInputLog        Boolean           @default(false)
  createdAt         DateTime          @default(now())
  folderUUID        String?
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder            ReflectionFolder? @relation("ReflectionFolder", fields: [folderUUID], references: [folderUUID])
}

model ReflectionFolder {
  folderUUID  String       @id @default(uuid())
  name        String
  userId      String
  reflections Reflection[] @relation("ReflectionFolder")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
